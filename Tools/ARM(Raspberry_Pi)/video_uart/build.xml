<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
  Build executable modules for Raspberry Pi.
     ====================================================================== -->
<project name="video_uart" default="default">
  <description>
    	Example uart and video for Raspberry Pi.
  </description>
  
	<property name="arm-tools-path">/opt/gcc-arm/latest</property>
  <property name="gcc-bin">${arm-tools-path}/bin</property>
  <property name="exec">${gcc-bin}/arm-none-eabi</property>
	<property name="cpp-libs">${arm-tools-path}/lib/gcc/arm-none-eabi/4.8.3</property>
  <property name="copts">-Wno-write-strings -O2 -mfpu=vfp -mfloat-abi=hard -march=armv6zk -mtune=arm1176jzf-s -nostdlib -nostartfiles -ffreestanding -fno-exceptions</property>
	
  <target name="default" depends="clean, gcc, as, ld, dump, hex, img" description="description">
        
  </target>

  <target name="gcc">
    <echo>GCC-ARM compiles source files</echo>
    <exec dir="${basedir}" executable="${exec}-gcc">
      <arg line="${copts} -c main.cpp periph.c ../../../Library/Display/formatter.cpp"/>
    </exec>
  </target>

  <target name="as">
    <echo>GCC-ARM compiles asm files</echo>
    <exec dir="${basedir}" executable="${exec}-as">
      <arg line=" -o vectors.o vectors.s"/>
    </exec>
  </target>

  <target name="ld">
    <echo>GCC-ARM link object files</echo>
    <exec dir="${basedir}" executable="${exec}-ld">
      <arg line=" -L${cpp-libs} vectors.o main.o periph.o formatter.o -lgcc -T loader -o video.elf"/>
    </exec>
  </target>

  <target name="dump">
    <echo>GCC-ARM dump elf file</echo>
    <exec dir="${basedir}" executable="${exec}-objdump" output="video.lst">
      <arg line="-D video.elf"/>
    </exec>
 </target>
	
  <target name="hex">
    <echo>GCC-ARM create HEX file from elf file</echo>
    <exec dir="${basedir}" executable="${exec}-objcopy">
      <arg line=" video.elf -O ihex video.hex"/>
    </exec>
  </target>

  <target name="img">
    <echo>GCC-ARM create binary (image) file from elf file</echo>
    <exec dir="${basedir}" executable="${exec}-objcopy">
      <arg line=" video.elf -O binary kernel.img"/>
    </exec>
  </target>

  <target name="clean">
    <echo>Clean project</echo>
    <delete>
      <fileset dir="${basedir}">
        <include name="*.o"/>
        <include name="*.bin"/>
        <include name="*.elf"/>
        <include name="*.lst"/>
        <include name="*.hex"/>
        <include name="*.img"/>
      </fileset>
    </delete>
  </target>
</project>
