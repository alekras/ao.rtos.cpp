
TOOLCHAIN.VERSION = 14.3.1
ARM_TOOLS_PATH = /opt/gcc-arm/arm-gnu-toolchain-${TOOLCHAIN.VERSION}
EXEC = ${ARM_TOOLS_PATH}/bin/arm-none-eabi
CPP_LIBS = ${ARM_TOOLS_PATH}/lib/gcc/arm-none-eabi/${TOOLCHAIN.VERSION}
COPTS = -c -Wno-write-strings -O2 -march=armv7-a+nofp -mtune=cortex-a7 -marm -nostdlib -nostartfiles -mno-unaligned-access -ffreestanding -fno-exceptions
CPPOPTS = ${COPTS} -std=c++11 -fno-rtti

PORT_DIR = ${ROOT_DIR}/Porting/ARM-Raspberry_Pi
PORTING_OBJ_DIR = ${GCC_DIR}/Porting
RPI_VERSION = RPI2

INCLUDE_PATHS := -I ${PORT_DIR}/Include ${INCLUDE_PATHS}

hex : ${TARGET_DIR}/application.hex

image : ${TARGET_DIR}/kernel.img

all : hex image

${TARGET_DIR}/application.hex : ${GCC_DIR}/application.elf
	@echo GCC-ARM creates HEX file from elf file
	@${EXEC}-objcopy $< -O ihex $@

${GCC_DIR}/application.elf : prepare ${GCC_DIR}/Application/main.o ${GCC_DIR}/libapp.a libkern libaortos libport
	@echo linker makes application.elf 
	@${EXEC}-ld ${PORTING_OBJ_DIR}/arm_cpu.o ${GCC_DIR}/Application/main.o \
	-L${CPP_LIBS} -L${GCC_DIR} \
	-lapp \
	-lkern \
	-laortos \
	-lport \
	-lgcc -Map ${LISTING_DIR}/map.lst -T ${objDir}/loader -o $@
	@${EXEC}-objdump -D $@ > ${LISTING_DIR}/application.lst

${TARGET_DIR}/kernel.img : ${GCC_DIR}/application_img.elf
	@echo GCC-ARM creates binary image file from elf file
	@${EXEC}-objcopy $< -O binary $@

${GCC_DIR}/application_img.elf : prepare ${GCC_DIR}/Application/main.o ${GCC_DIR}/libapp.a libkern libaortos libport
	@echo linker makes application_img.elf 
	@${EXEC}-ld ${PORTING_OBJ_DIR}/arm_cpu.o ${GCC_DIR}/Application/main.o \
	-L${CPP_LIBS} -L${GCC_DIR} \
	-lapp \
	-lkern \
	-laortos \
	-lport \
	-lgcc -Map ${LISTING_DIR}/map_img.lst -T ${objDir}/loader_rpi2 -o $@
	@${EXEC}-objdump -D $@ > ${LISTING_DIR}/application_img.lst
	