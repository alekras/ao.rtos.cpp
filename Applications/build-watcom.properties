# for Linux build:
targetDir =${user.home}/work/target/watcom
listingDir =${user.home}/work/listings/watcom
WATCOM_LIB =${user.home}/Application/watcom/lib386

compiler.watcom =true
compiler =watcom
# -wx       - set warning level to maximum setting 
# -zq       - operate quietly (display only error messages)
# -ot       - favor execution time over code size in optimizations 
# -s        - remove stack overflow checks
# -3r       - 386 register calling conventions
# -bt=linux - build target is operating system linux
# -mf       - flat memory model (small code/small data assuming CS=DS=SS=ES)
# -xd       - disable exception handling (default)
# -xr       - enable RTTI
compile.flags.watcom =-wx -zq -ot -s -3r -bt=linux -mf -xd -xr -d_WATCOM_
compiler.exec =wpp386

# Does not work yet...
#assembler =wasm
#assembler.exec =wasm
assembler.nasm =true
assembler =nasm
#assembler.exec =nasm
assembler.exec =yasm

linker =watcom
linker.watcom =true
wlink.1 =format elf runtime linux option map output RAW OFFSET=0x1000
#wlink.1 = format elf runtime linux option map 
wlink.2 =option START=_cstart_ order clname CODE offset=0x1000
linker.flags.wlink = ${wlink.1} ${wlink.2}   

#appDir =Application/Test_1
#appDir =Application/Test_2-hsm
appDir =Test_2-fsm
#appDir =Application/Test_DPP
#appDir =Application/SerialPort_Example
#appDir =Application/Keyboard_Example
#appDir =Application/LoggingWithSerPort_Example
